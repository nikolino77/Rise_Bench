#include "CreateTree.hh"
#include <vector>

CreateTree* CreateTree::fInstance = NULL;

using namespace std;

CreateTree::CreateTree(TString name,Bool_t hits,Bool_t absorptions)
{
	

	if(fInstance) 
	{
    		return;
  	}

  	this->HITS=hits;
  	this->ABSORPTIONS=absorptions;

  	this->fInstance = this;
  	this->fname = name;
  	this->ftree = new TTree("tree","name");
 
  	this->GetTree()->Branch("Run",&this->Run,"Run/I");
  	this->GetTree()->Branch("Event",&this->Event,"Event/I");
  	this->GetTree()->Branch("Process",&this->Process,"Process/I");
  	this->GetTree()->Branch("NumOptPhotons",&this->NumOptPhotons,"NumOptPhotons/I");
  	this->GetTree()->Branch("NumCerenkovPhotons",&this->NumCerenkovPhotons,"NumCerenkovPhotons/I");
  	this->GetTree()->Branch("NumScintPhotons",&this->NumScintPhotons,"NumScintPhotons/I");
  	this->GetTree()->Branch("NumOptPhotonsAbsorbed",&this->NumOptPhotonsAbsorbed,"NumOptPhotonsAbsorbed/I");
  	this->GetTree()->Branch("NumOptPhotonsRayleigh",&this->NumOptPhotonsRayleigh,"NumOptPhotonsRayleigh/I");
  	this->GetTree()->Branch("NumCherenkovPr",&this->NumCherenkovPr,"NumCherenkovPr/I");
  	this->GetTree()->Branch("NumeBrem",&this->NumeBrem,"NumeBrem/I");  
  

  	this->GetTree()->Branch("NumBoundaryAbsorption",&this->NumBoundaryAbsorption,"NumBoundaryAbsorption/I");
  	this->GetTree()->Branch("NumBoundaryReflection",&this->NumBoundaryReflection,"NumBoundaryReflection/I");


  	this->GetTree()->Branch("OptPhotonEnergy",&this->OptPhotonEnergy,"OptPhotonEnergy[NumOptPhotons]/F");
  	this->GetTree()->Branch("NumBoundaryFresnelRefraction",&this->NumBoundaryFresnelRefraction,"NumBoundaryFresnelRefraction/I");
  	this->GetTree()->Branch("NumBoundaryStepTooSmall",&this->NumBoundaryStepTooSmall,"NumBoundaryStepTooSmall/I");
  	this->GetTree()->Branch("NumBoundaryFresnelReflection",&this->NumBoundaryFresnelReflection,"NumBoundaryFresnelReflection/I");
  	this->GetTree()->Branch("NumBoundaryLobeReflection",&this->NumBoundaryLobeReflection,"NumBoundaryLobeReflection/I");
  	this->GetTree()->Branch("NumBoundarySpikeReflection",&this->NumBoundarySpikeReflection,"NumBoundarySpikeReflection/I");
  	this->GetTree()->Branch("NumBoundaryTotalInternalReflection",&this->NumBoundaryTotalInternalReflection,"NumBoundaryTotalInternalReflection/I");
  	this->GetTree()->Branch("NumBoundaryLambertianReflection",&this->NumBoundaryLambertianReflection,"NumBoundaryLambertianReflection/I");
  	this->GetTree()->Branch("NumBoundaryBackScattering",&this->NumBoundaryBackScattering,"NumBoundaryBackScattering/I");

  	this->GetTree()->Branch("ScintillationYield",&this->ScintillationYield,"ScintillationYield/F");
  	this->GetTree()->Branch("RiseTime",&this->RiseTime,"RiseTime/F"); 
  	this->GetTree()->Branch("Reflectivity",&this->Reflectivity,"Reflectivity/F");
  	this->GetTree()->Branch("CrystalHeight",&this->CrystalHeight,"CrystalHeight/F");
  	this->GetTree()->Branch("CrystalDiameter",&this->CrystalDiameter,"CrystalDiameter/F");
  	this->GetTree()->Branch("CrystalX",&this->CrystalX,"CrystalX/F");
  	this->GetTree()->Branch("CrystalY",&this->CrystalY,"CrystalY/F");   
  	this->GetTree()->Branch("Gap",&this->Gap,"Gap/F");
  	this->GetTree()->Branch("GapMaterial",&this->GapMaterial,"GapMaterial/F");
  	this->GetTree()->Branch("GapRefIndex",&this->GapRefIndex,"GapRefIndex/F");
  	this->GetTree()->Branch("AbsLength",&this->AbsLength,"AbsLength/F");
  
  	this->GetTree()->Branch("Shape",&this->Shape,"Shape/F");
  	this->GetTree()->Branch("Readout",&this->Readout,"Readout/F");
  
  	this->GetTree()->Branch("ScMaterial",&this->ScMaterial,"ScMaterial/F");
     
  	this->GetTree()->Branch("DOI",&this->DOI,"DOI/F");
  	this->GetTree()->Branch("zPhotCompt",&this->zPhotCompt,"zPhotCompt/F");
  	this->GetTree()->Branch("zeIoni",&this->zeIoni,"zeIoni/F");
  	this->GetTree()->Branch("zScint",&this->zScint,"zScint/F");

  	this->GetTree()->Branch("ReflBackside",&this->ReflBackside,"ReflBackside/I");

  	this->GetTree()->Branch("NumProcess",&this->NumProcess,"NumProcess/I");
  	this->GetTree()->Branch("EProcessStart",&this->EProcessStart,"EProcessStart[NumProcess]/F");
  	this->GetTree()->Branch("EProcessFinal",&this->EProcessFinal,"EProcessFinal[NumProcess]/F");
  	this->GetTree()->Branch("IDProcess",&this->IDProcess,"IDProcess[NumProcess]/I");
  	this->GetTree()->Branch("DOIProcess",&this->DOIProcess,"DOIProcess[NumProcess]/F");

  	this->GetTree()->Branch("AirLayer",&this->AirLayer,"AirLayer/I");
  	this->GetTree()->Branch("AirGap",&this->AirGap,"AirGap/F");
  	this->GetTree()->Branch("AirLayerSigmaAlpha",&this->AirLayerSigmaAlpha,"AirLayerSigmaAlpha/F");

  	this->GetTree()->Branch("gammax",&this->gammax,"gammax/F");
  	this->GetTree()->Branch("gammay",&this->gammay,"gammay/F");
  	this->GetTree()->Branch("gammaz",&this->gammaz,"gammaz/F");

  	// electrons/gammas
  	this->GetTree()->Branch("PartNum",&this->PartNum,"PartNum/I");
  	this->GetTree()->Branch("PartID",&this->PartID,"PartID[PartNum]/I");
  	this->GetTree()->Branch("PartProcess",&this->PartProcess,"PartProcess[PartNum]/I");
  	this->GetTree()->Branch("PartIDParent",&this->PartIDParent,"PartIDParent[PartNum]/I");
  	this->GetTree()->Branch("PartEn",&this->PartEn,"PartEn[PartNum]/F");
  	this->GetTree()->Branch("PartType",&this->PartType,"PartType[PartNum]/I");
	
  	this->GetTree()->Branch("TestI",&this->TestI,"TestI/I");
  	this->GetTree()->Branch("TestF",&this->TestF,"TestF/F");

/*--------------------MY STUFF-----------------*/

  	this->GetTree()->Branch("OutSurface",&this->OutSurface,"OutSurface/I");

	this->GetTree()->Branch("depositionProcess",&depositionProcess);
	this->GetTree()->Branch("energyDeposited",&energyDeposited);
	this->GetTree()->Branch("depositionX",&depositionX);
	this->GetTree()->Branch("depositionY",&depositionY);
	this->GetTree()->Branch("depositionZ",&depositionZ);
  	this->GetTree()->Branch("energyTot",&this->energyTot,"energyTot/F");

	this->GetTree()->Branch("opticProcess",&opticProcess);
	this->GetTree()->Branch("firstPosX",&firstPosX);
	this->GetTree()->Branch("firstPosY",&firstPosY);
	this->GetTree()->Branch("firstPosZ",&firstPosZ);


  	// Photons at exit interface

    	this->GetTree()->Branch("IntOut",&IntOut);		
    	this->GetTree()->Branch("Time",&Time);	
    	this->GetTree()->Branch("Parent",&Parent);
    	this->GetTree()->Branch("ID",&ID);	
  	
	
  	this->Clear();
}

CreateTree::~CreateTree()
{

}

Bool_t CreateTree::Write()
{
  	TString filename = this->GetName();
  	filename+=".root";
  	TFile* file = new TFile(filename,"RECREATE");
  	this->GetTree()->Write();
  	file->Write();
  	file->Close();
  	return true;
}

void CreateTree::Clear()
{

  	Run=0;
  	Event=0;
  	Process=0;
  	NumOptPhotons=0;
	NumCerenkovPhotons=0;
	NumScintPhotons=0;
  	NumOptPhotonsAbsorbed=0;
  	NumOptPhotonsRayleigh=0;
  	MPPCNumHits=0;
  	NumCherenkovPr=0;
  	NumeBrem=0;
  	NumOptPhotonsInterface = 0;
  	NumOptPhotonsExit	 = 0;

  	zPhotCompt=-999;
  	zeIoni=-999;
  	zScint=-999;

  	DOI=-1;
  	TestI=0;
  	TestF=0;

  	NumBoundaryAbsorption=0;
  	NumBoundaryReflection=0;
  	NumBoundaryStepTooSmall=0;
  	NumBoundaryFresnelRefraction=0;

  	NumBoundaryFresnelReflection=0;
  	NumBoundaryLobeReflection=0;
  	NumBoundarySpikeReflection=0;
  	NumBoundaryTotalInternalReflection=0;
  	NumBoundaryLambertianReflection=0;
  	NumBoundaryBackScattering=0;

  	NumProcess=0;
  	PartNum=0;

	OutSurface=0;
	opticProcess.clear();
	firstPosX.clear();
	firstPosY.clear();
	firstPosZ.clear();

	depositionProcess.clear();
	energyDeposited.clear();
	depositionX.clear();		
	depositionY.clear();		
	depositionZ.clear();	
    	IntOut.clear();
    	Time.clear();
    	Parent.clear();
    	ID.clear();

	energyTot = 0;	
}
